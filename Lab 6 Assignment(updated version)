import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
//required for border
import javax.swing.BorderFactory;
import javax.swing.border.Border;
//required for file IO
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.BufferedReader;
//required for exception
import java.io.IOException;
//required for decimal number
import java.text.DecimalFormat;

//Cake Panel
class CakePanel extends JPanel implements ActionListener, ItemListener{
   DecimalFormat df = new DecimalFormat("0.00");
   //list all UI components for the panel
   JLabel line;
   JLabel menu;
   JLabel line2;
   JLabel toppings;
   JLabel topping;
   JLabel topping1;
   JLabel topping2;
   JLabel price;
   JLabel small;
   JLabel medium;
   JLabel big;
   JLabel details;
   JLabel line3;
   JLabel orderToppings;
   JLabel size;  
   JRadioButton l1;
   JRadioButton l2;
   JRadioButton l3;
   JLabel l4;
   JLabel total;
   JLabel line5;
   JButton submit;
   JButton clear;
   JLabel lbl_output; 
   JScrollPane jsp;
   JCheckBox t1;
   JCheckBox t2;
   JCheckBox t3;
   JLabel quantity;
   JTextField user_q;
   Border border = BorderFactory.createLineBorder(Color.BLACK, 1);

   //global variable  
   String output="";
   String list_selection="";
   String list_selection1="";
   String list_selection2="";
   String rb_selection="";
   String filePath="data.txt"; //in the same directory
   int ttl, multi;
   int q,a;
   
   public CakePanel(){        
      
      line = new JLabel ("----------------------------------------------");
      menu = new JLabel ("Cake Menu");
      line2 = new JLabel ("----------------------------------------------");
      toppings = new JLabel ("BlackForest with available toppings:");
      topping = new JLabel ("1) Chocolate");
      topping1 = new JLabel ("2) Cherries");
      topping2 = new JLabel ("3) Whipped Cream");
      price = new JLabel ("Price:");
      small = new JLabel ("[1] Small     : RM45.00");
      medium = new JLabel ("[2] Medium : RM65.00");
      big = new JLabel ("[3] Big          : RM80.00");
      details = new JLabel ("Cake Order Details:");
      line3 = new JLabel ("-------------------------------------------------------------------------------------------");
      orderToppings = new JLabel ("Topping :");
      
      //adjust size and set layout
        setPreferredSize (new Dimension (600, 700));
        setLayout (null);

        //add components
        add (line);
        add (menu);
        add (line2);
        add (toppings);
        add (topping);
        add (topping1);
        add (topping2);
        add (price);
        add (small);
        add (medium);
        add (big);
        add (details);
        add (line3);
        add (orderToppings);
        
        //set component bounds (only needed by Absolute Positioning)
        line.setBounds (20, 15, 210, 25);
        menu.setBounds (78, 35, 100, 25);
        line2.setBounds (20, 55, 210, 25);
        toppings.setBounds (20, 75, 230, 25);
        topping.setBounds (20, 95, 100, 25);
        topping1.setBounds (20, 115, 100, 25);
        topping2.setBounds (20, 135, 120, 25);
        price.setBounds (20, 170, 100, 25);
        small.setBounds (20, 190, 130, 25);
        medium.setBounds (20, 210, 130, 25);
        big.setBounds (20, 230, 130, 25);
        details.setBounds (20, 270, 130, 25);
        line3.setBounds (20, 285, 400, 25);
        orderToppings.setBounds (20, 305, 100, 25);

      //Radio buttons and action listener
      t1 = new JCheckBox("Chocolate");
      t1.setBounds (75, 305, 100, 25);
      t1.addItemListener(this);
      t2 = new JCheckBox("Cherries");
      t2.setBounds (175, 305, 90, 25);
      t2.addItemListener(this);
      t3 = new JCheckBox("Whipped Cream");
      t3.setBounds (265, 305, 140, 25);
      t3.addItemListener(this);

      add(t1);
      add(t2);
      add(t3);
      
      size = new JLabel ("Size        :");
      size.setBounds (20, 330, 100, 25);
      add(size);
      l1 = new JRadioButton("Small");
      l1.setBounds (75, 330, 100, 25);
      l1.addActionListener(this);
      add(l1);
      l2 = new JRadioButton("Medium");
      l2.setBounds (175, 330, 90, 25);
      l2.addActionListener(this);
      add(l2);
      l3 = new JRadioButton("Big");
      l3.setBounds (265, 330, 50, 25);
      l3.addActionListener(this);
      add(l3);
      
      ButtonGroup bg = new ButtonGroup();
      bg.add(l1);
      bg.add(l2);
      bg.add(l3);
      
      quantity = new JLabel("Quantity: ");
      quantity.setBounds(20,355,100,25);
      add(quantity);
      user_q = new JTextField(20);
      user_q.setBounds(75,355,100,25); 
      add(user_q);
      
      l4 = new JLabel ("-------------------------------------------------------------------------------------------");
      l4.setBounds (20, 370, 400, 25);
      add(l4);
      
      total = new JLabel ("Total Price :");
      total.setBounds (20, 385, 200, 25);
      add(total);
          
      line5 = new JLabel ("-------------------------------------------------------------------------------------------");
      line5.setBounds (20, 400, 400, 25);
      add(line5);
            
      submit = new JButton ("Submit");
      submit.setBounds (330, 355, 100, 25);
      add(submit);
      
      clear = new JButton("Clear");
      clear.setBounds (450, 355, 100, 25);
      add(clear);
      
      //handle button submit action listener
      //view the input to output label
      //and write to file
      submit.addActionListener(new ActionListener(){  
          public void actionPerformed(ActionEvent e){  
             //call method              
             if(printOutput())
                writeInput(); 
                quantity.setText("Quantity: ");
                total.setText("Total Price : RM"+df.format(multi));   
          }  
       });
      
      //handle button clear action listener
      clear.addActionListener(new ActionListener(){  
          public void actionPerformed(ActionEvent e){  
             lbl_output.setText("Output"); 
             bg.clearSelection();
             t1.setSelected(false);
             t2.setSelected(false);
             t3.setSelected(false);
             user_q.setText(" ");
             quantity.setText("Quantity: ");
             total.setText("Total Price : RM"); 
          }  
        });
            
      lbl_output = new JLabel("Output");
      lbl_output.setBounds (20, 430, 400, 25);
      lbl_output.setBorder(border);
      lbl_output.setVerticalAlignment(JLabel.TOP);
      
      //add output label to scrollpane
      jsp = new JScrollPane(lbl_output);
      jsp.setBounds (20, 430, 400, 200);
      add(jsp);   
}
  //handle radio button selection
   public void actionPerformed(ActionEvent ae) {
      rb_selection = ae.getActionCommand();    	   
   }
   
   //handle item listener for checkbox
   public void itemStateChanged(ItemEvent ie) {
      JCheckBox check = (JCheckBox)ie.getSource();
      list_selection += check.getText() + " ";   
   }

     //method to print output to lbl_output
    public boolean printOutput(){
      output = "<html>";
      output += "Thank you for your order<br><br>";   
      output += "Topping: " + list_selection + "<br>";
      q = Integer.parseInt(user_q.getText());
      if(t1.isSelected()){
      ttl += 10;
      }if(t2.isSelected()){
      ttl += 10;
      }if(t3.isSelected()){
      ttl += 10;
      }
      
      if(l1.isSelected()){
         multi = ttl + (45 * q);
      }else if(l2.isSelected()){
         multi = ttl + (65 * q);
      }else if(l3.isSelected()){
         multi = ttl + (80 * q);
      }
      
      output += "Size: " + rb_selection + "<br>";
      output += "Quantity: "+ q + "<br>";
      output += "Total: RM" + df.format(multi) + "<br>";
      output += "</html>";          
      lbl_output.setText(output);
      jsp.getViewport().revalidate();
      return true;
    }
    
    //write to file
    public void writeInput(){
      File file = new File(filePath);
		FileWriter fr = null;
		BufferedWriter br = null;
		PrintWriter pr = null;
       
      String input = rb_selection + ", " + list_selection + ","  +  user_q.getText() +", RM" + df.format(multi);
       
       //exception implementation
		try {
			// to append to file, you need to initialize FileWriter using below constructor
			fr = new FileWriter(file, true);
			br = new BufferedWriter(fr);
			pr = new PrintWriter(br);
			pr.println(input);
		} catch (IOException e) {			
         lbl_output.setText(e.toString());
		} finally {
			try {
				pr.close();
				br.close();
				fr.close();
			} catch (IOException e) {
				lbl_output.setText(e.toString());
			}
		}
    }
}

class MenuActionListener implements ActionListener {
   CakePanel fp;
   //receive FormPanel class to this constructor
   public MenuActionListener(CakePanel p){
      fp = p;
   }
    public void actionPerformed(ActionEvent e) {
       BufferedReader reader;
 	   try {
 			reader = new BufferedReader(new FileReader(fp.filePath));
 			String line = reader.readLine();
          String output="<html>";
 			while (line != null) {
 				output += line + "<br>";
 				// read next line
 				line = reader.readLine();
 			}
          output += "<br>";
          fp.lbl_output.setText(output);
 			reader.close();
 		} catch (IOException io) {
 			fp.lbl_output.setText(io.toString());
 		}
 
   }
 }

//run the application using this main
public class CakeApp {  
   public static void main(String[] 	args) {  
      JFrame f = new JFrame("Cake Order System");
      f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
      f.getContentPane().add (new MyPanel());
      CakePanel fp = new CakePanel();
      
      JMenuBar mb = new JMenuBar(); 
      // create a menu 
      JMenu x = new JMenu("Menu"); 
      
      // create menuitems 
      JMenuItem m1 = new JMenuItem("View Data"); 
      // attach listener and send FormPanel class
      m1.addActionListener(new MenuActionListener(fp));
      
      JMenuItem m2 = new JMenuItem("Exit");  
      m2.addActionListener((event) -> System.exit(0));
      // add menu items to menu 
      x.add(m1); 
      x.add(m2);
     
      // add menu to menu bar 
      mb.add(x); 
      // add menubar to frame 
      f.setJMenuBar(mb);  
               
      //add panels to frame      
      f.add(fp);
      f.pack();
      f.setVisible(true);
   }  
}
